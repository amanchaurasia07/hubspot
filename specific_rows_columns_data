import pandas as pd
import requests

def get_all_submission(access_token, hs_survey_id):
   # sub_url = "https://api.hubspot.com/crm/v3/object/feedback_submissions"
   # prop_url = "https://api.hubspot.com/crm/v3/propertie/feedback_submissions"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json",
    }
    try:
        # Get properties
        params = {"archived": False}
        response_properties = requests.get(prop_url, headers=headers, params=params)
        properties = response_properties.json()
        prop_list = [{"name": prop["name"], "type": prop["type"]} for prop in properties["results"]]
        prop_df = pd.DataFrame(prop_list)

        # Get submissions for a specific hs_survey_id in batches
        sub_list_all = []
        params_sub = {
            "properties": prop_df["name"].unique().tolist(),
            "limit": 100,
            "filterGroups": [
                {
                    "filters": [
                        {
                            "value": hs_survey_id,
                            "propertyName": "hs_survey_id",
                            "operator": "EQ",
                        }
                    ]
                }
            ]
        }

        while True:
            response_submissions = requests.get(sub_url, headers=headers, params=params_sub)
            submissions = response_submissions.json()
            sub_list = [sub["properties"] for sub in submissions["results"]]
            sub_list_all += sub_list
            if "paging" in submissions.keys() and "next" in submissions["paging"]:
                next_page = submissions["paging"]["next"]["after"]
                params_sub["after"] = next_page["id"]  # Fix the pagination parameter
                if not next_page:
                    break
            else:
                break

        sub_df = pd.DataFrame(sub_list_all)

        # Filter rows with hs_survey_id equal to any id
        sub_df = sub_df[sub_df["hs_survey_id"] == hs_survey_id]

        # Drop columns with only None values
        sub_df = sub_df.dropna(axis=1, how="all")

        return sub_df

    except requests.exceptions.HTTPError as e:
        print(f"HTTP error occurred: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
   ## access_token = [access_token] #orignal_access token
   ## hs_survey_id = [id] #hs_survey_id
    sub_df = get_all_submission(access_token, hs_survey_id)
    sub_df.to_csv(f"specific_survey_drop_column_{hs_survey_id}.csv", index=False)
